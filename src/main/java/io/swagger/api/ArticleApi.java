/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.23).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Article;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-11-27T12:32:16.940Z[GMT]")
public interface ArticleApi {

    @Operation(summary = "Deletes an article", description = "Deletes an article", tags={ "Shop" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK") })
    @RequestMapping(value = "/article/{aid}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> articleAidDelete(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("aid") String aid);


    @Operation(summary = "Get specified article", description = "Get specified article", tags={ "Shop" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(schema = @Schema(implementation = Article.class))) })
    @RequestMapping(value = "/article/{aid}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Article> articleAidGet(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("aid") String aid);


    @Operation(summary = "Partial changes on article", description = "Partial changes on article", tags={ "Shop" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK") })
    @RequestMapping(value = "/article/{aid}",
        consumes = { "application/json" }, 
        method = RequestMethod.PATCH)
    ResponseEntity<Void> articleAidPatch(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("aid") String aid, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody Article body);


    @Operation(summary = "Changes an article", description = "Changes an article", tags={ "Shop" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK") })
    @RequestMapping(value = "/article/{aid}",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> articleAidPut(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("aid") String aid, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody Article body);


    @Operation(summary = "Get all articles", description = "Get all articles of this Service", tags={ "Shop" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(array = @ArraySchema(schema = @Schema(implementation = Article.class)))) })
    @RequestMapping(value = "/article/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Article>> articleGet();


    @Operation(summary = "Creates an Article", description = "Test ======  Creates a new ***Articles*** based on the given requestBody.  - name - price  1. First ordered list item 2. Another item ⋅⋅* Unordered sub-list.     1. Actual numbers don't matter, just that it's a number   ⋅⋅1. Ordered sub-list 4. And another item.  [I'm an inline-style link with title](https://www.google.com \"Google's Homepage\")  ![alt text](https://www.predic8.de/logo6.png \"Logo Title Text 1\") ", tags={ "Shop" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Created") })
    @RequestMapping(value = "/article/",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> articlePost(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody Article body);

}

